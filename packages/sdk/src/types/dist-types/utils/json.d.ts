import { FlatJSON, LabeledFlatJSON } from '../types/json.js';
import { AnyObject } from '../types/misc.js';
import { BatchedTranslationFiles, TranslationFileFlatJSON } from '../types/file.js';
import { LLMResponse } from '../types/LLM.js';
import { Configuration } from 'src/db/entities/Configuration.js';
import { Filter } from 'src/types/configuration.js';
export declare function validateAndParseJSON(inputStr: string, context?: string): object;
export declare function flattenJSON(json: string): FlatJSON[];
export declare function compareFlattenedJSONs(flattenedOld: FlatJSON[], flattenedNew: FlatJSON[]): FlatJSON[];
export declare function unflattenJSON(flattened: FlatJSON[]): AnyObject;
export declare function mergeFlattenJSONs(origin: FlatJSON[], incoming: FlatJSON[], storeAll?: boolean): FlatJSON[];
export declare function createBatches(content: FlatJSON[], tokensPerChar: number, maxTokensPerBatch: number): FlatJSON[][];
export declare function convertToJson(content: string | Buffer, filePath: string, projectID: number): Promise<string>;
export declare function convertFromJson(projectID: number, content: AnyObject, fileExtension: string, rawContent?: string | Buffer, language?: string): Promise<any | void>;
export declare function flattenBatches(batches: FlatJSON[][]): FlatJSON[];
export declare function compressFlatJSON(json: FlatJSON, index: number): FlatJSON;
export declare function extractValuesFromFlatJson(flatJsonArray: FlatJSON[]): string[];
export declare function getAllValuesAsString(obj: any): string;
export declare function mergeFlattenJSONsWithLabel(...labeledData: LabeledFlatJSON[]): FlatJSON[];
export declare function processBatches(translationID: number, batchedFilesForTranslation: BatchedTranslationFiles, language: string, config: Configuration, translationAction: (jsonString: string, lang: string, config: Configuration, fileType: string, isIntegrationMode: boolean, relevantContext: string) => Promise<LLMResponse>, jsonParse?: boolean): Promise<FlatJSON[][]>;
export declare function filterPoContent(content: FlatJSON[]): FlatJSON[];
export declare function cleanJson(content: FlatJSON[], filePath: string, filters?: Filter): FlatJSON[];
export declare function cleanJsonWithUserSpecifiedFilter(content: FlatJSON[], filters?: Filter): FlatJSON[];
export declare function splitArrayInTwo(array: FlatJSON[]): [FlatJSON[], FlatJSON[]];
export declare function mergeTranslationFile(origin: TranslationFileFlatJSON[], incoming: TranslationFileFlatJSON[]): TranslationFileFlatJSON[];
export declare function hashedKeys(content: any[]): {
    [key: string]: string;
};
export declare function hash(entry: any): string;
