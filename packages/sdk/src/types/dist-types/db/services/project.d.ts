import { DataSource } from 'typeorm';
import { Project } from '../entities/Project.js';
import { Team } from '../entities/Team.js';
export declare class ProjectService {
    private projectRepository;
    constructor(dataSource: DataSource);
    createProject(newProject: Partial<Project>, team: Team): Promise<Project>;
    deleteProject(projectId: number): Promise<void>;
    saveProjectDomain(projectID: number, domainUrl: string): Promise<Project>;
    saveWordpressProjectDomain(projectID: number, domainUrl: string): Promise<Project>;
    getProjectDomain(projectID: number): Promise<string>;
    getAllProjectDomains(): Promise<string[]>;
    clearProjects(): Promise<void>;
    registerWebhook(webhookUrl: string, projectID: number): Promise<void>;
    updateProject(updatedProject: Partial<Project>): Promise<Project>;
    findProjectsByIds(projectIds: number[]): Promise<Project[]>;
    toggleTestMode(projectID: number, testIntegrationMode: boolean): Promise<Project>;
    toggleIsActive(projectID: number, isActive: boolean): Promise<Project>;
    renameProject(projectID: number, projectName: string): Promise<Project>;
    findProjectById(projectID: number): Promise<Project | null>;
    findProjectByName(name: string): Promise<Project | null>;
    getPrivateProjectAPIKey(projectID: number): Promise<string>;
    getPublicProjectAPIKey(projectID: number): Promise<string>;
    findProjectByDomain(domain: string): Promise<Project>;
    getDomainKeys(projectID: number): Promise<string[]>;
    setTXT1DNSValidation(projectID: number, isValidated: boolean): Promise<Project>;
    setOriginServerProxy(projectID: number, name: string): Promise<Project>;
    setTXT2DNSValidation(projectID: number, isValidated: boolean): Promise<Project>;
    setReverseProxyDNSValidation(projectID: number, isValidated: boolean): Promise<Project>;
    findProjectByPrivateAPIKey(apiKey: string): Promise<Project | null>;
    findProjectByPublicAPIKey(apiKey: string): Promise<Project | null>;
    countProjectTextMapWords(projectId: number): Promise<Record<string, number>>;
    countTotalProjectWords(projectId: number): Promise<number>;
    getAllProjectDomainKeys(): Promise<string[]>;
    getAllProjects(): Promise<Project[]>;
}
