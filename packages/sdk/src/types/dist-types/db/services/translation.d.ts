import { DataSource } from 'typeorm';
import { Translation } from '../entities/Translation.js';
import { TranslationStatus, ValidationResponse } from '../../types/translation.js';
import { S3File } from 'src/types/s3.js';
export declare class TranslationService {
    private translationRepository;
    constructor(dataSource: DataSource);
    emitCompletionEvent(translationId: number, status: TranslationStatus, projectID: number): Promise<void>;
    emitCancellationEvent(translationId: number, status: TranslationStatus, projectID: number, reason?: string): Promise<void>;
    enqueueTranslation(newTranslation: Partial<Translation>, skipProcessing?: boolean): Promise<Translation>;
    addTokens(id: number, amount: number): Promise<Translation>;
    addWords(id: number, amount: number): Promise<Translation>;
    updateTranslation(updatedTranslation: Partial<Translation>): Promise<Translation>;
    updateStatusByID(translationID: number, status: TranslationStatus, statusReason?: string): Promise<Translation>;
    updateAsCompleted(translationID: number, translationTimeInSeconds: number): Promise<Translation>;
    clearTranslations(): Promise<void>;
    deleteTranslationById(id: number): Promise<void>;
    findTranslationById(translationID: number): Promise<Translation | null>;
    findTranslationsByProjectId(projectID: number): Promise<Translation[]>;
    findLastCompletedTranslation(projectID: number): Promise<Translation | null>;
    findLastCancelledTranslation(projectID: number): Promise<Translation | null>;
    findNextQueuedTranslation(projectID: number): Promise<Translation | null>;
    findAllProcessingTranslations(): Promise<Translation[]>;
    findAllQueuedTranslations(): Promise<Translation[]>;
    requiresTranslation(projectID: number, s3Files: S3File[], languages: string[]): Promise<boolean>;
    hasProcessingOrQueuedTranslation(projectID: number): Promise<boolean>;
    calculateTimeoutDuration(projectID: number): Promise<number>;
    calculateRemainingTimeout(projectID: number): Promise<number>;
    applyTimeoutForProject(projectID: number): Promise<void>;
    validateTranslation(translation: Translation): Promise<ValidationResponse>;
}
